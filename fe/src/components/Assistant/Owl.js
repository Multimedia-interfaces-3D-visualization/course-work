/*
Auto-generated by: https://github.com/pmndrs/gltfjsx
*/

import React, { useRef, useEffect, useState } from 'react';
import { useGLTF, useAnimations } from '@react-three/drei';

export default function Model({ ...props }) {
  const group = useRef();
  const prevAnimationRef = useRef();
  const { nodes, materials, animations } = useGLTF('/final_i_believe_2.glb');
  const { ref, mixer, names, actions, clips } = useAnimations(
    animations,
    group,
  );

  useEffect(() => {
    prevAnimationRef.current = props.animation;
  });
  const prevAnimation = prevAnimationRef.current;

  useEffect(() => {
    if (prevAnimation === props.animation) {
      return;
    }

    // console.log(actions);
    Object.entries(actions).forEach(([key, _]) => {
      if (key !== props.animation) {
        actions[key].stop();
      }
    });

    if (props.animation === 'listening') {
      actions.listening_start.play();
      setTimeout(() => {
        actions.listening_start.stop();
        actions.listening_long.play();
      }, 1500);
    } else {
      if (prevAnimation === 'listening') {
        console.log('listening_end');
        actions.listening_end.play();
        setTimeout(() => {
          console.log('listening_end after timeout');
          actions.listening_end.stop();
          actions[props.animation].play();
        }, 1500);
      } else {
        console.log('another animation');
        console.log('prev: ' + prevAnimation, 'cur: ' + props.animation);
        actions[props.animation].play();
      }
    }

    // if (props.speaking.speaking === true) {
    //   actions['listening_start'].stop();
    //   actions['speaking'].play();
    // } else {
    //   actions['speaking'].stop();
    //   actions['listening_start'].play();
    // }
  });

  return (
    <group ref={group} {...props} dispose={null}>
      <group position={[0.02, 0.1, 0.25]} rotation={[-0.05, 0.01, -0.01]}>
        <primitive object={nodes.Bone} />
        <primitive object={nodes.Bone031} />
        <skinnedMesh
          geometry={nodes.Cube028_1.geometry}
          material={materials['face.002']}
          skeleton={nodes.Cube028_1.skeleton}
        />
        <skinnedMesh
          geometry={nodes.Cube028_2.geometry}
          material={materials['beak.002']}
          skeleton={nodes.Cube028_2.skeleton}
        />
        <skinnedMesh
          geometry={nodes.Cube028_3.geometry}
          material={materials['body.002']}
          skeleton={nodes.Cube028_3.skeleton}
        />
        <skinnedMesh
          geometry={nodes.Cube028_4.geometry}
          material={materials['feet.002']}
          skeleton={nodes.Cube028_4.skeleton}
        />
        <skinnedMesh
          geometry={nodes.Cube028_5.geometry}
          material={materials['eyes.002']}
          skeleton={nodes.Cube028_5.skeleton}
        />
      </group>
    </group>
  );
}

useGLTF.preload('/final_i_believe_2.glb');
